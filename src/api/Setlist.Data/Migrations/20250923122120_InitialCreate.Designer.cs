// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Setlist.Data.Context;

#nullable disable

namespace Setlist.Data.Migrations
{
    [DbContext(typeof(SetlistDbContext))]
    [Migration("20250923122120_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Setlist.Core.Entities.Gig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Gigs_Date");

                    b.ToTable("Gigs");
                });

            modelBuilder.Entity("Setlist.Core.Entities.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GigId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Setlist.Core.Entities.SetSong", b =>
                {
                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("SetId", "SongId");

                    b.HasIndex("SongId");

                    b.HasIndex("SetId", "Order")
                        .IsUnique()
                        .HasDatabaseName("IX_SetSongs_SetId_Order");

                    b.HasIndex("SetId", "SongId")
                        .IsUnique()
                        .HasDatabaseName("IX_SetSongs_SetId_SongId");

                    b.ToTable("SetSongs");
                });

            modelBuilder.Entity("Setlist.Core.Entities.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadinessStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Songs_Name");

                    b.HasIndex("ReadinessStatus")
                        .HasDatabaseName("IX_Songs_ReadinessStatus");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Artist = "Guns N' Roses",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationSeconds = 356,
                            Genre = "Rock",
                            Name = "Sweet Child O' Mine",
                            ReadinessStatus = "Ready",
                            UpdatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Artist = "Oasis",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationSeconds = 258,
                            Genre = "Rock",
                            Name = "Wonderwall",
                            ReadinessStatus = "Ready",
                            UpdatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Artist = "Eagles",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationSeconds = 391,
                            Genre = "Rock",
                            Name = "Hotel California",
                            ReadinessStatus = "InProgress",
                            UpdatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Artist = "Queen",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationSeconds = 355,
                            Genre = "Rock",
                            Name = "Bohemian Rhapsody",
                            ReadinessStatus = "WishList",
                            UpdatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Setlist.Core.Entities.Set", b =>
                {
                    b.HasOne("Setlist.Core.Entities.Gig", "Gig")
                        .WithMany("Sets")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gig");
                });

            modelBuilder.Entity("Setlist.Core.Entities.SetSong", b =>
                {
                    b.HasOne("Setlist.Core.Entities.Set", "Set")
                        .WithMany("SetSongs")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Setlist.Core.Entities.Song", "Song")
                        .WithMany("SetSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Set");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Setlist.Core.Entities.Gig", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Setlist.Core.Entities.Set", b =>
                {
                    b.Navigation("SetSongs");
                });

            modelBuilder.Entity("Setlist.Core.Entities.Song", b =>
                {
                    b.Navigation("SetSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
